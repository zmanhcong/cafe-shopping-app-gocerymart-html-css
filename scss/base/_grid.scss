/* 
    How to use
        1. Specify at row class. example → class="row row-cols-lg-4 row-cols-sm-2 row-cols-1"
        2. Specify at col class. example → class="col-md-3", class="col-sm-12"
        3. Can use Gutters:[g-*][g-x][g-y]. example: g-0, g-lg-3 that are remove padding between columns. example: class="row row-cols-lg-4 g-0"
        4. Less than 576px, use .col-1 or .row-cols-1
        5. Can specify both in row and column. example: 4 columns in row but item3 has col-6, mean 6/12 column size 
            <div class="row row-cols-lg-4">
                <div class="col-6">Item3</div>
            </div>
        6. If use .container-fluid, width: 100% at all breakpoints.(all time)
        7.Offset dùng để đẩy item sang bên phải ứng với số cột. ta có offset-0 -> offset-11 

*/

@use "sass:math";

$grid-breakpoints: (
    xxl: 1400px,
    xl: 1200px,
    lg: 992px,
    md: 768px,
    sm: 576px,
    xs: 0,
);

$container-max-widths: (
    sm: 100%,
    md: 540px,
    lg: 720px,
    xl: 960px,
    xxl: 1140px,
);

// define common value
$grid-columns: 12 !default;
$grid-gutter-width: 30px !default;

// Gutters = $grid-gutter-width * ratio. exg: 30px * 0.5 = 15px;
$gutters: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3,
);

// placeholder [gutter-padding]
%gutter-padding {
    padding-left: calc(var(--grid-gutter-x) * 0.5);
    padding-right: calc(var(--grid-gutter-x) * 0.5);
}

// define container
.container-fluid {
    --grid-gutter-x: #{$grid-gutter-width};
    --grid-gutter-y: 0;

    width: 100%;
    margin-left: auto;
    margin-right: auto;
    @extend %gutter-padding;
}

.container {
    @extend .container-fluid;
    width: 1370px;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--grid-gutter-y) * -1);
    margin-left: calc(var(--grid-gutter-x) * 0.5 * -1);
    margin-right: calc(var(--grid-gutter-x) * 0.5 * -1);

    // Create gutter-y
    > * {
        margin-top: var(--grid-gutter-y);
        @extend %gutter-padding;
    }
}

.col {
    flex: 1 0;
}
// Create Breakpoint @media
@mixin make-media-query($dimension) {
    @media (max-width: ($dimension - 0.02)) {
        @content;
    }
}

// Setting for use case: class="row row-cols-1 row-cols-md-2 row-cols-lg-4"
@mixin make-row-columns($infix: null) {
    @for $i from 1 through $grid-columns * 0.5 {
        .row-cols#{$infix}-#{$i} > * {
            flex: 0 0 auto;
            width: math.div(100%, $i);
        }
    }
}

// Setting for use case: class="col-(sm,lg.xx)-4" for column
@mixin make-columns($infix: null) {
    @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
            flex: 0 0 auto;
            width: math.div(100%, $grid-columns) * $i;
        }
    }
}

// Offsets: Move item to right with margin-left;
@mixin make-offsets($infix: null) {
    @for $i from 0 to $grid-columns {
        .offset#{$infix}-#{$i} {
            margin-left: if($i > 0, math.div(100%, $grid-columns) * $i, 0);
        }
    }
}

// Gutters(example: gx-3, gy-md-2)
@mixin make-gutters($infix: null) {
    @each $i, $ratio in $gutters {
        .g#{$infix}-#{$i},
        .gx#{$infix}-#{$i} {
            --grid-gutter-x: #{$grid-gutter-width * $ratio};
        }

        .g#{$infix}-#{$i},
        .gy#{$infix}-#{$i} {
            --grid-gutter-y: #{$grid-gutter-width * $ratio};
        }
    }
}

@include make-row-columns();

@include make-columns();

@include make-offsets();

@include make-gutters();

@each $breakpoint, $dimension in $grid-breakpoints {
    $max-width: map-get(
        $map: $container-max-widths,
        $key: $breakpoint,
    );
    // except with "sx" screen. use @responsive with ".col-1" instead of ".col-xs-1"
    // $infix: if($breakpoint == xs, "", "-#{$breakpoint}");
    $infix: "-#{$breakpoint}";

    @include make-media-query($dimension) {
        .container {
            max-width: $max-width;
        }

        @include make-row-columns($infix);

        @include make-columns($infix);

        @include make-offsets($infix);

        @include make-gutters($infix);
    }
}
